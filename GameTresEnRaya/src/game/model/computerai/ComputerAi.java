/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package game.model.computerai;

import game.model.Board;
import game.model.factory.Box;
import game.model.factory.State;
import game.model.logic.LogicGame;
import game.model.logic.SearchAddress;

/**
 * Creates the first and second move for the machine and also manages the movements generated by the
 * heuristic class.
 * 
 * @author kevin
 */
public class ComputerAi {

    /**
     * Represents the state for the computer.
     */
    private State computerState;
    /**
     * Represents the heuristic class based in the minimax algorithm.
     */
    private final MiniMaxAlgorithm algorithm;
    
    public ComputerAi(LogicGame logic) {
        computerState = State.CIRCLE;
        algorithm = new MiniMaxAlgorithm(logic);
    }

    /**
     * Represents the move for the machine.
     * @param board the game board.
     * @param state the state of the player.
     * @return a SearchAddress type result that represents the line where the three in line is located
     *          or free if there is no three in line.
     */
    public SearchAddress movement(Board board, State state) {
        if (state == State.CIRCLE) {
            computerState = State.CROSS;
        }
        playFirstOrSecondTurn(board);
        return algorithm.movement(board, computerState, state);
    }
    
    /**
     * Generates the first and second move for the machine
     * @param board the current game board.
     */
    private void playFirstOrSecondTurn(Board board) {
        if (board.isEmpty()) {
            int xPosition = (int) Math.random() * 3;
            int yPosition = (int) Math.random() * 3;
            Box[][] boxes = board.getBoxes();
            boxes[xPosition][yPosition].setState(computerState);
        } else {
            if (board.PlayerHasPlayedOneTurn()) {
                int xPosition = (int) Math.random() * 3;
                int yPosition = (int) Math.random() * 3;
                Box[][] boxes = board.getBoxes();
                if (boxes[xPosition][yPosition].getState() == State.FREE) {
                    boxes[xPosition][yPosition].setState(computerState);
                } else {
                    playFirstOrSecondTurn(board);
                }
            }
        }
    }

}
